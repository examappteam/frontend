{"ast":null,"code":"'use strict';\n/**\n * A Promise that can be canceled with {@link CancelablePromise#cancel}.\n * @extends Promise\n*/\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar CancelablePromise = function () {\n  /**\n   * Construct a new {@link CancelablePromise}.\n   * @param {CancelablePromise.OnCreate} onCreate\n   * @param {CancelablePromise.OnCancel} onCancel\n  */\n\n  /**\n  * A function to be called on {@link CancelablePromise} creation\n  * @typedef {function} CancelablePromise.OnCreate\n  * @param {function(*)} resolve\n  * @param {function(*)} reject\n  * @param {function(): boolean} isCanceled\n  */\n\n  /**\n  * A function to be called when {@link CancelablePromise#cancel} is called\n  * @typedef {function} CancelablePromise.OnCancel\n  */\n  function CancelablePromise(onCreate, onCancel) {\n    var _this = this;\n\n    _classCallCheck(this, CancelablePromise);\n    /* istanbul ignore next */\n\n\n    Object.defineProperties(this, {\n      _isCancelable: {\n        writable: true,\n        value: true\n      },\n      _isCanceled: {\n        writable: true,\n        value: false\n      },\n      _onCancel: {\n        value: onCancel\n      }\n    });\n    Object.defineProperty(this, '_promise', {\n      value: new Promise(function (resolve, reject) {\n        onCreate(function (value) {\n          _this._isCancelable = false;\n          resolve(value);\n        }, function (reason) {\n          _this._isCancelable = false;\n          reject(reason);\n        }, function () {\n          return _this._isCanceled;\n        });\n      })\n    });\n  }\n  /**\n   * Create a synchronously-rejected {@link CancelablePromise}.\n   * @param {*} reason\n   * @returns {Promise<*>}\n   */\n\n\n  _createClass(CancelablePromise, [{\n    key: 'cancel',\n\n    /**\n     * Attempt to cancel the {@link CancelablePromise}.\n     * @returns {this}\n     */\n    value: function cancel() {\n      if (this._isCancelable) {\n        this._isCanceled = true;\n\n        this._onCancel();\n      }\n\n      return this;\n    }\n    /**\n     * @param {function} onRejected\n     * @returns {CancelablePromise}\n     */\n\n  }, {\n    key: 'catch',\n    value: function _catch() {\n      var args = [].slice.call(arguments);\n      var promise = this._promise;\n      return new CancelablePromise(function onCreate(resolve, reject) {\n        promise.catch.apply(promise, _toConsumableArray(args)).then(resolve, reject);\n      }, this._onCancel);\n    }\n    /**\n     * @param {?function} onResolved\n     * @param {function} [onRejected]\n     * @returns {CancelablePromise}\n     */\n\n  }, {\n    key: 'then',\n    value: function then() {\n      var args = [].slice.call(arguments);\n      var promise = this._promise;\n      return new CancelablePromise(function onCreate(resolve, reject) {\n        promise.then.apply(promise, _toConsumableArray(args)).then(resolve, reject);\n      }, this._onCancel);\n    }\n  }], [{\n    key: 'reject',\n    value: function reject(reason) {\n      return new CancelablePromise(function rejected(resolve, reject) {\n        reject(reason);\n      }, function onCancel() {// Do nothing.\n      });\n    }\n    /**\n     * Create a synchronously-resolved {@link CancelablePromise}.\n     * @param {*|Promise<*>|Thenable<*>} result\n     * @returns {CancelablePromise<*>}\n     */\n\n  }, {\n    key: 'resolve',\n    value: function resolve(result) {\n      return new CancelablePromise(function resolved(resolve) {\n        resolve(result);\n      }, function onCancel() {// Do nothing.\n      });\n    }\n  }]);\n\n  return CancelablePromise;\n}();\n\nmodule.exports = CancelablePromise;","map":null,"metadata":{},"sourceType":"script"}