{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MediaTrackTransceiver = require('./transceiver');\n/**\n * A {@link MediaTrackSender} represents one or more local RTCRtpSenders.\n * @extends MediaTrackTransceiver\n */\n\n\nvar MediaTrackSender = function (_MediaTrackTransceive) {\n  _inherits(MediaTrackSender, _MediaTrackTransceive);\n  /**\n   * Construct a {@link MediaTrackSender}.\n   * @param {MediaStreamTrack} mediaStreamTrack\n   */\n\n\n  function MediaTrackSender(mediaStreamTrack) {\n    _classCallCheck(this, MediaTrackSender);\n\n    var _this = _possibleConstructorReturn(this, (MediaTrackSender.__proto__ || Object.getPrototypeOf(MediaTrackSender)).call(this, mediaStreamTrack.id, mediaStreamTrack));\n\n    Object.defineProperties(_this, {\n      _senders: {\n        value: new Set()\n      }\n    });\n    return _this;\n  }\n  /**\n   * Add an RTCRtpSender.\n   * @param {RTCRtpSender} sender\n   * @returns {this}\n   */\n\n\n  _createClass(MediaTrackSender, [{\n    key: 'addSender',\n    value: function addSender(sender) {\n      this._senders.add(sender);\n\n      return this;\n    }\n    /**\n     * Remove an RTCRtpSender.\n     * @param {RTCRtpSender} sender\n     * @returns {this}\n     */\n\n  }, {\n    key: 'removeSender',\n    value: function removeSender(sender) {\n      this._senders.delete(sender);\n\n      return this;\n    }\n  }]);\n\n  return MediaTrackSender;\n}(MediaTrackTransceiver);\n\nmodule.exports = MediaTrackSender;","map":null,"metadata":{},"sourceType":"script"}