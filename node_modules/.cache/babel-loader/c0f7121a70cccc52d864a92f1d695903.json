{"ast":null,"code":"'use strict';\n\nvar defer = require('./').defer;\n\nvar states = {\n  high: new Set(['low']),\n  low: new Set(['high'])\n};\n/**\n * Construct a {@link Latch}.\n * @class\n * @classdesc A {@link Latch} has two states (\"high\" and \"low\") and methods for\n * transitioning between them ({@link Latch#raise} and {@link Latch#lower}).\n * @param {string} [initialState=\"low\"] - either \"high\" or \"low\"\n */\n\nfunction Latch(initialState) {\n  if (!(this instanceof Latch)) {\n    return new Latch(initialState);\n  }\n\n  var state = initialState || 'low';\n  Object.defineProperties(this, {\n    _state: {\n      set: function set(_state) {\n        if (state !== _state) {\n          state = _state;\n\n          var whenDeferreds = this._whenDeferreds.get(state);\n\n          whenDeferreds.forEach(function (deferred) {\n            deferred.resolve(this);\n          }, this);\n          whenDeferreds.clear();\n        }\n      },\n      get: function get() {\n        return state;\n      }\n    },\n    _whenDeferreds: {\n      value: new Map([['high', new Set()], ['low', new Set()]])\n    },\n    state: {\n      enumerable: true,\n      get: function get() {\n        return this._state;\n      }\n    }\n  });\n}\n/**\n * Transition to \"low\".\n * @returns {this}\n * @throws {Error}\n */\n\n\nLatch.prototype.lower = function lower() {\n  return this.transition('low');\n};\n/**\n * Transition to \"high\".\n * @returns {this}\n * @throws {Error}\n */\n\n\nLatch.prototype.raise = function raise() {\n  return this.transition('high');\n};\n/**\n * Transition to a new state.\n * @param {string} newState\n * @returns {this}\n * @throws {Error}\n */\n\n\nLatch.prototype.transition = function transition(newState) {\n  if (!states[this.state].has(newState)) {\n    throw createUnreachableStateError(this.state, newState);\n  }\n\n  this._state = newState;\n  return this;\n};\n/**\n * Return a Promise that resolves when the {@link Latch} transitions to\n * the specified state.\n * @param {string} state\n * @returns {Promise<this>}\n */\n\n\nLatch.prototype.when = function when(state) {\n  if (this.state === state) {\n    return Promise.resolve(this);\n  }\n\n  if (!states[this.state].has(state)) {\n    return Promise.reject(createUnreachableStateError(this.state, state));\n  }\n\n  var deferred = defer();\n\n  this._whenDeferreds.get(state).add(deferred);\n\n  return deferred.promise;\n};\n/**\n * Create an unreachable state Error.\n * @param {string} from - state to be transitioned from\n * @param {string} to - state to be transitioned to\n * @return {Error}\n */\n\n\nfunction createUnreachableStateError(from, to) {\n  return new Error('Cannot transition from \"' + from + '\" to \"' + to + '\"');\n}\n\nmodule.exports = Latch;","map":null,"metadata":{},"sourceType":"script"}