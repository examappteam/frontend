{"ast":null,"code":"'use strict';\n\nvar CancelablePromise = require('../../util/cancelablepromise');\n\nvar DefaultPeerConnectionManager = require('./peerconnectionmanager');\n\nvar DefaultRoomV2 = require('./room');\n\nvar DefaultTransport = require('./transport');\n\nvar SignalingConnectionDisconnectedError = require('../../util/twilio-video-errors').SignalingConnectionDisconnectedError;\n\nvar SignalingIncomingMessageInvalidError = require('../../util/twilio-video-errors').SignalingIncomingMessageInvalidError;\n\nvar flatMap = require('../../util').flatMap;\n\nfunction createCancelableRoomSignalingPromise(token, ua, localParticipant, iceServerSource, encodingParameters, preferredCodecs, options) {\n  options = Object.assign({\n    PeerConnectionManager: DefaultPeerConnectionManager,\n    RoomV2: DefaultRoomV2,\n    Transport: DefaultTransport\n  }, options);\n\n  if (options._sdpSemantics) {\n    options.sdpSemantics = options._sdpSemantics;\n  }\n\n  var transport = void 0;\n  var PeerConnectionManager = options.PeerConnectionManager;\n  var RoomV2 = options.RoomV2;\n  var peerConnectionManager = new PeerConnectionManager(iceServerSource, encodingParameters, preferredCodecs, options);\n  var trackSenders = flatMap(localParticipant.tracks, function (trackV2) {\n    return [trackV2.trackTransceiver];\n  });\n  peerConnectionManager.setConfiguration(options);\n  peerConnectionManager.setTrackSenders(trackSenders);\n  var cancelationError = new Error('Canceled');\n  return new CancelablePromise(function onCreate(resolve, reject, isCanceled) {\n    peerConnectionManager.createAndOffer().then(function createAndOfferSucceeded() {\n      // NOTE(mmalavalli): PeerConnectionManager#createAndOffer() queues the\n      // initial offer in the event queue for the 'description' event. So,\n      // we are dequeueing to prevent the spurious 'update' message sent by\n      // the client after connecting to a room.\n      peerConnectionManager.dequeue('description');\n      return new Promise(function (resolve, reject) {\n        if (isCanceled()) {\n          reject(cancelationError);\n          return;\n        }\n\n        var transportOptions = typeof options.wsServerInsights === 'string' ? {\n          wsServerInsights: options.wsServerInsights\n        } : {};\n\n        if (options.InsightsPublisher) {\n          transportOptions.InsightsPublisher = options.InsightsPublisher;\n        }\n\n        if (options.NullInsightsPublisher) {\n          transportOptions.NullInsightsPublisher = options.NullInsightsPublisher;\n        }\n\n        transportOptions = Object.assign({\n          dominantSpeaker: options.dominantSpeaker,\n          environment: options.environment,\n          networkQuality: options.networkQuality,\n          iceServerSourceStatus: iceServerSource.status,\n          insights: options.insights,\n          realm: options.realm,\n          sdpSemantics: options.sdpSemantics\n        }, transportOptions);\n        var Transport = options.Transport;\n        transport = new Transport(options.name, token, localParticipant, peerConnectionManager, ua, transportOptions);\n        transport.once('connected', function connected(initialState) {\n          if (isCanceled()) {\n            reject(cancelationError);\n            return;\n          }\n\n          var localParticipantState = initialState.participant;\n\n          if (!localParticipantState) {\n            reject(new SignalingIncomingMessageInvalidError());\n            return;\n          }\n\n          resolve(new RoomV2(localParticipant, initialState, transport, peerConnectionManager, options));\n        });\n        transport.once('stateChanged', function stateChanged(state, error) {\n          if (state === 'disconnected') {\n            error = error || new SignalingConnectionDisconnectedError();\n            transport = null;\n            reject(error);\n          }\n        });\n      });\n    }).then(function createRoomSignalingSucceeded(roomSignaling) {\n      if (isCanceled()) {\n        peerConnectionManager.close();\n        roomSignaling.disconnect();\n        reject(cancelationError);\n        return;\n      }\n\n      resolve(roomSignaling);\n    }).catch(function onError(error) {\n      if (transport) {\n        transport.disconnect();\n        transport = null;\n      }\n\n      peerConnectionManager.close();\n      reject(error);\n    });\n  }, function onCancel() {\n    if (transport) {\n      transport.disconnect();\n      transport = null;\n    }\n  });\n}\n\nmodule.exports = createCancelableRoomSignalingPromise;","map":null,"metadata":{},"sourceType":"script"}