{"ast":null,"code":"\"use strict\";\n/**\n * @fileoverview Hacks - This file contains all of the things we\n * wish we didn't have to do, just for interop.  It is similar to\n * Utils, which provides actually useful and relevant functions for\n * a SIP library. Methods in this file are grouped by vendor, so\n * as to most easily track when particular hacks may not be necessary anymore.\n */\n\nmodule.exports = function (SIP) {\n  //keep to quiet jshint, and remain consistent with other files\n  SIP = SIP;\n  var Hacks = {\n    AllBrowsers: {\n      maskDtls: function maskDtls(sdp) {\n        if (sdp) {\n          sdp = sdp.replace(/ UDP\\/TLS\\/RTP\\/SAVP/gmi, \" RTP/SAVP\");\n        }\n\n        return sdp;\n      },\n      unmaskDtls: function unmaskDtls(sdp) {\n        /**\n         * Chrome does not handle DTLS correctly (Canaray does, but not production)\n         * keeping Chrome as SDES until DTLS is fixed (comment out 'is_opera' condition)\n         *\n         * UPDATE: May 21, 2014\n         * Chrome 35 now properly defaults to DTLS.  Only Opera remains using SDES\n         *\n         * UPDATE: 2014-09-24\n         * Opera now supports DTLS by default as well.\n         *\n         **/\n        return sdp.replace(/ RTP\\/SAVP/gmi, \" UDP/TLS/RTP/SAVP\");\n      }\n    },\n    Firefox: {\n      /* Condition to detect if hacks are applicable */\n      isFirefox: function isFirefox() {\n        return typeof mozRTCPeerConnection !== 'undefined';\n      },\n      cannotHandleExtraWhitespace: function cannotHandleExtraWhitespace(sdp) {\n        if (this.isFirefox() && sdp) {\n          sdp = sdp.replace(/ \\r\\n/g, \"\\r\\n\");\n        }\n\n        return sdp;\n      },\n      hasMissingCLineInSDP: function hasMissingCLineInSDP(sdp) {\n        /*\n         * This is a Firefox hack to insert valid sdp when getDescription is\n         * called with the constraint offerToReceiveVideo = false.\n         * We search for either a c-line at the top of the sdp above all\n         * m-lines. If that does not exist then we search for a c-line\n         * beneath each m-line. If it is missing a c-line, we insert\n         * a fake c-line with the ip address 0.0.0.0. This is then valid\n         * sdp and no media will be sent for that m-line.\n         *\n         * Valid SDP is:\n         * m=\n         * i=\n         * c=\n         */\n        var insertAt, mlines;\n\n        if (sdp.indexOf('c=') > sdp.indexOf('m=')) {\n          // Find all m= lines\n          mlines = sdp.match(/m=.*\\r\\n.*/g);\n\n          for (var i = 0; i < mlines.length; i++) {\n            // If it has an i= line, check if the next line is the c= line\n            if (mlines[i].toString().search(/i=.*/) >= 0) {\n              insertAt = sdp.indexOf(mlines[i].toString()) + mlines[i].toString().length;\n\n              if (sdp.substr(insertAt, 2) !== 'c=') {\n                sdp = sdp.substr(0, insertAt) + '\\r\\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);\n              } // else add the C line if it's missing\n\n            } else if (mlines[i].toString().search(/c=.*/) < 0) {\n              insertAt = sdp.indexOf(mlines[i].toString().match(/.*/)) + mlines[i].toString().match(/.*/).toString().length;\n              sdp = sdp.substr(0, insertAt) + '\\r\\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);\n            }\n          }\n        }\n\n        return sdp;\n      }\n    },\n    Chrome: {\n      needsExplicitlyInactiveSDP: function needsExplicitlyInactiveSDP(sdp) {\n        var sub, index;\n\n        if (Hacks.Firefox.isFirefox()) {\n          // Fix this in Firefox before sending\n          index = sdp.indexOf('m=video 0');\n\n          if (index !== -1) {\n            sub = sdp.substr(index);\n            sub = sub.replace(/\\r\\nc=IN IP4.*\\r\\n$/, '\\r\\nc=IN IP4 0.0.0.0\\r\\na=inactive\\r\\n');\n            return sdp.substr(0, index) + sub;\n          }\n        }\n\n        return sdp;\n      },\n      getsConfusedAboutGUM: function getsConfusedAboutGUM(session) {\n        if (session.mediaHandler) {\n          session.mediaHandler.close();\n        }\n      }\n    }\n  };\n  return Hacks;\n};","map":null,"metadata":{},"sourceType":"script"}