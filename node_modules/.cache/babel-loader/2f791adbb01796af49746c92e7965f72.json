{"ast":null,"code":"\"use strict\";\n\nvar NodeEventEmitter = require('events').EventEmitter;\n\nmodule.exports = function (console) {\n  // Don't use `new SIP.EventEmitter()` for inheriting.\n  // Use Object.create(SIP.EventEmitter.prototoype);\n  function EventEmitter() {\n    NodeEventEmitter.call(this);\n  }\n\n  EventEmitter.prototype = Object.create(NodeEventEmitter.prototype, {\n    constructor: {\n      value: EventEmitter,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  EventEmitter.prototype.off = function off(eventName, listener) {\n    var warning = '';\n    warning += 'SIP.EventEmitter#off is deprecated and may be removed in future SIP.js versions.\\n';\n    warning += 'Please use removeListener or removeAllListeners instead.\\n';\n    warning += 'See here for more details:\\n';\n    warning += 'http://nodejs.org/api/events.html#events_emitter_removelistener_event_listener';\n    console.warn(warning);\n\n    if (arguments.length < 2) {\n      return this.removeAllListeners.apply(this, arguments);\n    } else {\n      return this.removeListener(eventName, listener);\n    }\n  };\n\n  return EventEmitter;\n};","map":null,"metadata":{},"sourceType":"script"}