{"ast":null,"code":"'use strict';\n/**\n * An {@link IdentityTrackMatcher} matches RTCTrackEvents with their respective\n * MediaStreamTrack IDs.\n */\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar IdentityTrackMatcher = function () {\n  function IdentityTrackMatcher() {\n    _classCallCheck(this, IdentityTrackMatcher);\n  }\n\n  _createClass(IdentityTrackMatcher, [{\n    key: 'match',\n\n    /**\n     * Match a given MediaStreamTrack with its ID.\n     * @param {RTCTrackEvent} event\n     * @returns {Track.ID}\n     */\n    value: function match(event) {\n      return event.track.id;\n    }\n    /**\n     * Update the {@link IdentityTrackMatcher} with a new SDP.\n     * @param {string} sdp\n     */\n\n  }, {\n    key: 'update',\n    value: function update() {}\n  }]);\n\n  return IdentityTrackMatcher;\n}();\n\nmodule.exports = IdentityTrackMatcher;","map":null,"metadata":{},"sourceType":"script"}