{"ast":null,"code":"'use strict';\n\nvar asLocalTrack = require('./util').asLocalTrack;\n\nvar buildLogLevels = require('./util').buildLogLevels;\n\nvar getUserMedia = require('@twilio/webrtc').getUserMedia;\n\nvar LocalAudioTrack = require('./media/track/es5/localaudiotrack');\n\nvar LocalDataTrack = require('./media/track/es5/localdatatrack');\n\nvar LocalVideoTrack = require('./media/track/es5/localvideotrack');\n\nvar MediaStreamTrack = require('@twilio/webrtc').MediaStreamTrack;\n\nvar Log = require('./util/log');\n\nvar DEFAULT_LOG_LEVEL = require('./util/constants').DEFAULT_LOG_LEVEL;\n\nvar workaround180748 = require('./webaudio/workaround180748'); // This is used to make out which createLocalTracks() call a particular Log\n// statement belongs to. Each call to createLocalTracks() increments this\n// counter.\n\n\nvar createLocalTrackCalls = 0;\n/**\n * Request {@link LocalTrack}s. By default, it requests a\n * {@link LocalAudioTrack} and a {@link LocalVideoTrack}.\n * @param {CreateLocalTracksOptions} [options]\n * @returns {Promise<Array<LocalTrack>>}\n * @example\n * var Video = require('twilio-video');\n * // Request audio and video tracks\n * Video.createLocalTracks().then(function(localTracks) {\n *   var localMediaContainer = document.getElementById('local-media-container-id');\n *   localTracks.forEach(function(track) {\n *     localMediaContainer.appendChild(track.attach());\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request just the default audio track\n * Video.createLocalTracks({ audio: true }).then(function(localTracks) {\n *   return Video.connect('my-token', {\n *     name: 'my-cool-room',\n *     tracks: localTracks\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request the audio and video tracks with custom names\n * Video.createLocalTracks({\n *   audio: { name: 'microphone' },\n *   video: { name: 'camera' }\n * }).then(function(localTracks) {\n *   localTracks.forEach(function(localTrack) {\n *     console.log(localTrack.name);\n *   });\n * });\n */\n\nfunction createLocalTracks(options) {\n  var isAudioVideoAbsent = !(options && ('audio' in options || 'video' in options));\n  options = Object.assign({\n    audio: isAudioVideoAbsent,\n    getUserMedia: getUserMedia,\n    logLevel: DEFAULT_LOG_LEVEL,\n    LocalAudioTrack: LocalAudioTrack,\n    LocalDataTrack: LocalDataTrack,\n    LocalVideoTrack: LocalVideoTrack,\n    MediaStreamTrack: MediaStreamTrack,\n    Log: Log,\n    video: isAudioVideoAbsent\n  }, options);\n  var logComponentName = '[createLocalTracks #' + ++createLocalTrackCalls + ']';\n  var logLevels = buildLogLevels(options.logLevel);\n  var log = new options.Log('default', logComponentName, logLevels); // NOTE(mmalavalli): The Room \"name\" in \"options\" was being used\n  // as the LocalTrack name in asLocalTrack(). So we pass a copy of\n  // \"options\" without the \"name\".\n\n  var localTrackOptions = Object.assign({\n    log: log\n  }, options);\n  delete localTrackOptions.name;\n\n  if (options.audio === false && options.video === false) {\n    log.info('Neither audio nor video requested, so returning empty LocalTracks');\n    return Promise.resolve([]);\n  }\n\n  if (options.tracks) {\n    log.info('Adding user-provided LocalTracks');\n    log.debug('LocalTracks:', options.tracks);\n    return Promise.resolve(options.tracks);\n  }\n\n  var localTrackNameOptions = {\n    audio: options.audio && options.audio.name ? {\n      name: options.audio.name\n    } : {},\n    video: options.video && options.video.name ? {\n      name: options.video.name\n    } : {}\n  };\n\n  if (options.audio) {\n    delete options.audio.name;\n  }\n\n  if (options.video) {\n    delete options.video.name;\n  }\n\n  var mediaStreamConstraints = {\n    audio: options.audio,\n    video: options.video\n  };\n  var workaroundWebKitBug180748 = options.audio && options.audio.workaroundWebKitBug180748;\n  var mediaStreamPromise = workaroundWebKitBug180748 ? workaround180748(log, options.getUserMedia, mediaStreamConstraints) : options.getUserMedia(mediaStreamConstraints);\n  return mediaStreamPromise.then(function (mediaStream) {\n    var mediaStreamTracks = mediaStream.getAudioTracks().concat(mediaStream.getVideoTracks());\n    log.info('Call to getUserMedia successful; got MediaStreamTracks:', mediaStreamTracks);\n    return mediaStreamTracks.map(function (mediaStreamTrack) {\n      return asLocalTrack(mediaStreamTrack, Object.assign(localTrackNameOptions[mediaStreamTrack.kind], localTrackOptions));\n    });\n  }, function (error) {\n    log.warn('Call to getUserMedia failed:', error);\n    throw error;\n  });\n}\n/**\n * {@link createLocalTracks} options\n * @typedef {object} CreateLocalTracksOptions\n * @property {boolean|CreateLocalTrackOptions} [audio=true] - Whether or not to\n *   get local audio with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n * @property {LogLevel|LogLevels} [logLevel='warn'] - Set the log verbosity\n *   of logging to console. Passing a {@link LogLevel} string will use the same\n *   level for all components. Pass a {@link LogLevels} to set specific log\n *   levels.\n * @property {boolean|CreateLocalTrackOptions} [video=true] - Whether or not to\n *   get local video with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n */\n\n\nmodule.exports = createLocalTracks;","map":null,"metadata":{},"sourceType":"script"}