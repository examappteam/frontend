{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Participant = require('./participant');\n\nvar _require = require('./util'),\n    deprecateEvents = _require.deprecateEvents;\n/**\n * A {@link RemoteParticipant} represents a remote {@link Participant} in a\n * {@link Room}.\n * @extends Participant\n * @property {Map<Track.SID, RemoteAudioTrack>} audioTracks -\n *    The {@link Participant}'s {@link RemoteAudioTrack}s\n * @property {Map<Track.SID, RemoteAudioTrackPublication>} audioTrackPublications -\n *    The {@link Participant}'s {@link RemoteAudioTrackPublication}s\n * @property {Map<Track.SID, RemoteDataTrack>} dataTracks -\n *    The {@link Participant}'s {@link RemoteDataTrack}s\n * @property {Map<Track.SID, RemoteDataTrackPublication>} dataTrackPublications -\n *    The {@link Participant}'s {@link RemoteDataTrackPublication}s\n * @property {Map<Track.SID, RemoteTrack>} tracks -\n *    The {@link Participant}'s {@link RemoteTrack}s\n * @property {Map<Track.SID, RemoteTrackPublication>} trackPublications -\n *    The {@link Participant}'s {@link RemoteTrackPublication}s\n * @property {Map<Track.SID, RemoteVideoTrack>} videoTracks -\n *    The {@link Participant}'s {@link RemoteVideoTrack}s\n * @property {Map<Track.SID, RemoteVideoTrackPublication>} videoTrackPublications -\n *    The {@link Participant}'s {@link RemoteVideoTrackPublication}s\n * @emits RemoteParticipant#trackAdded\n * @emits RemoteParticipant#trackDimensionsChanged\n * @emits RemoteParticipant#trackDisabled\n * @emits RemoteParticipant#trackEnabled\n * @emits RemoteParticipant#trackMessage\n * @emits RemoteParticipant#trackPublished\n * @emits RemoteParticipant#trackRemoved\n * @emits RemoteParticipant#trackStarted\n * @emits RemoteParticipant#trackSubscribed\n * @emits RemoteParticipant#trackSubscriptionFailed\n * @emits RemoteParticipant#trackUnpublished\n * @emits RemoteParticipant#trackUnsubscribed\n */\n\n\nvar RemoteParticipant = function (_Participant) {\n  _inherits(RemoteParticipant, _Participant);\n  /**\n   * Construct a {@link RemoteParticipant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {object} [options]\n   */\n\n\n  function RemoteParticipant(signaling, options) {\n    _classCallCheck(this, RemoteParticipant);\n\n    var _this = _possibleConstructorReturn(this, (RemoteParticipant.__proto__ || Object.getPrototypeOf(RemoteParticipant)).call(this, signaling, options));\n\n    deprecateEvents('RemoteParticipant', _this, new Map([['trackAdded', 'trackSubscribed'], ['trackRemoved', 'trackUnsubscribed']]), _this._log);\n\n    _this._handleTrackSignalingEvents();\n\n    _this.once('disconnected', _this._unsubscribeTracks.bind(_this));\n\n    return _this;\n  }\n\n  _createClass(RemoteParticipant, [{\n    key: 'toString',\n    value: function toString() {\n      return '[RemoteParticipant #' + this._instanceId + (this.sid ? ': ' + this.sid : '') + ']';\n    }\n    /**\n     * @private\n     * @param {RemoteTrack} remoteTrack\n     * @param {RemoteTrackPublication} publication\n     * @returns {?RemoteTrack}\n     */\n\n  }, {\n    key: '_addTrack',\n    value: function _addTrack(remoteTrack, publication) {\n      remoteTrack._setSid(publication.trackSid);\n\n      if (!_get(RemoteParticipant.prototype.__proto__ || Object.getPrototypeOf(RemoteParticipant.prototype), '_addTrack', this).call(this, remoteTrack)) {\n        return null;\n      }\n\n      publication._subscribed(remoteTrack);\n\n      this.emit('trackSubscribed', remoteTrack);\n      return remoteTrack;\n    }\n    /**\n     * @private\n     * @param {RemoteTrackPublication} publication\n     * @returns {?RemoteTrackPublication}\n     */\n\n  }, {\n    key: '_addTrackPublication',\n    value: function _addTrackPublication(publication) {\n      var addedPublication = _get(RemoteParticipant.prototype.__proto__ || Object.getPrototypeOf(RemoteParticipant.prototype), '_addTrackPublication', this).call(this, publication);\n\n      if (!addedPublication) {\n        return null;\n      }\n\n      this.emit('trackPublished', addedPublication);\n      return addedPublication;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_getTrackPublicationEvents',\n    value: function _getTrackPublicationEvents() {\n      return [].concat(_toConsumableArray(_get(RemoteParticipant.prototype.__proto__ || Object.getPrototypeOf(RemoteParticipant.prototype), '_getTrackPublicationEvents', this).call(this)), [['subscriptionFailed', 'trackSubscriptionFailed']]);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_unsubscribeTracks',\n    value: function _unsubscribeTracks() {\n      var _this2 = this;\n\n      this.trackPublications.forEach(function (publication) {\n        if (publication.isSubscribed) {\n          var track = publication.track;\n\n          publication._unsubscribe();\n\n          _this2.emit('trackUnsubscribed', track);\n        }\n      });\n    }\n    /**\n     * @private\n     * @param {RemoteTrack} remoteTrack\n     * @param {RemoteTrackPublication} publication\n     * @returns {?RemoteTrack}\n     */\n\n  }, {\n    key: '_removeTrack',\n    value: function _removeTrack(remoteTrack, publication) {\n      var unsubscribedTrack = this.tracks.get(remoteTrack._id);\n\n      if (!unsubscribedTrack) {\n        return null;\n      }\n\n      this._deleteTrack(unsubscribedTrack);\n\n      publication._unsubscribe();\n\n      this.emit('trackUnsubscribed', unsubscribedTrack);\n      this.emit('trackRemoved', unsubscribedTrack);\n      return unsubscribedTrack;\n    }\n    /**\n     * @private\n     * @param {RemoteTrackPublication} publication\n     * @returns {?RemoteTrackPublication}\n     */\n\n  }, {\n    key: '_removeTrackPublication',\n    value: function _removeTrackPublication(publication) {\n      var removedPublication = _get(RemoteParticipant.prototype.__proto__ || Object.getPrototypeOf(RemoteParticipant.prototype), '_removeTrackPublication', this).call(this, publication);\n\n      if (!removedPublication) {\n        return null;\n      }\n\n      this.emit('trackUnpublished', removedPublication);\n      return removedPublication;\n    }\n  }]);\n\n  return RemoteParticipant;\n}(Participant);\n/**\n * A {@link RemoteTrack} was added by the {@link RemoteParticipant}.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was added\n * @event RemoteParticipant#trackAdded\n * @deprecated Use {@link RemoteParticipant#trackSubscribed} instead\n */\n\n/**\n * One of the {@link RemoteParticipant}'s {@link RemoteVideoTrack}'s dimensions changed.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} whose dimensions changed\n * @event RemoteParticipant#trackDimensionsChanged\n */\n\n/**\n * A {@link RemoteTrack} was disabled by the {@link RemoteParticipant}.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was disabled\n * @event RemoteParticipant#trackDisabled\n */\n\n/**\n * A {@link RemoteTrack} was enabled by the {@link RemoteParticipant}.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was enabled\n * @event RemoteParticipant#trackEnabled\n */\n\n/**\n * A message was received over one of the {@link RemoteParticipant}'s\n * {@link RemoteDataTrack}s.\n * @event RemoteParticipant#trackMessage\n * @param {string|ArrayBuffer} data\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} over which the\n *   message was received\n */\n\n/**\n * A {@link RemoteTrack} was published by the {@link RemoteParticipant} after\n * connecting to the {@link Room}. This event is not emitted for\n * {@link RemoteTrack}s that were published while the {@link RemoteParticipant}\n * was connecting to the {@link Room}.\n * @event RemoteParticipant#trackPublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the published {@link RemoteTrack}\n * @example\n * function trackPublished(publication) {\n *   console.log(`Track ${publication.trackSid} was published`);\n * }\n *\n * room.on('participantConnected', participant => {\n *   // Handle RemoteTracks published while connecting to the Room.\n *   participant.trackPublications.forEach(trackPublished);\n *\n *   // Handle RemoteTracks published after connecting to the Room.\n *   participant.on('trackPublished', trackPublished);\n * });\n */\n\n/**\n * A {@link RemoteTrack} was removed by the {@link RemoteParticipant}.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was removed\n * @event RemoteParticipant#trackRemoved\n * @deprecated Use {@link RemoteParticipant#trackUnsubscribed} instead\n */\n\n/**\n * One of the {@link RemoteParticipant}'s {@link RemoteTrack}s started.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that started\n * @event RemoteParticipant#trackStarted\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was subscribed to\n * @event RemoteParticipant#trackSubscribed\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} could not be subscribed to.\n * @param {TwilioError} error - The reason the {@link RemoteTrack} could not be\n *   subscribed to\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that could not\n *   be subscribed to\n * @event RemoteParticipant#trackSubscriptionFailed\n */\n\n/**\n * A {@link RemoteTrack} was unpublished by the {@link RemoteParticipant}.\n * @event RemoteParticipant#trackUnpublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the unpublished {@link RemoteTrack}\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was unsubscribed from.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was unsubscribed from\n * @event RemoteParticipant#trackUnsubscribed\n */\n\n\nmodule.exports = RemoteParticipant;","map":null,"metadata":{},"sourceType":"script"}