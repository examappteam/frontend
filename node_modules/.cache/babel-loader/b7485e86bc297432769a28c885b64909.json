{"ast":null,"code":"\"use strict\";\n\nvar levels = {\n  'error': 0,\n  'warn': 1,\n  'log': 2,\n  'debug': 3\n};\n\nmodule.exports = function (console) {\n  var LoggerFactory = function LoggerFactory() {\n    var logger,\n        level = 2,\n        builtinEnabled = true,\n        connector = null;\n    this.loggers = {};\n    logger = this.getLogger('sip.loggerfactory');\n    Object.defineProperties(this, {\n      builtinEnabled: {\n        get: function get() {\n          return builtinEnabled;\n        },\n        set: function set(value) {\n          if (typeof value === 'boolean') {\n            builtinEnabled = value;\n          } else {\n            logger.error('invalid \"builtinEnabled\" parameter value: ' + JSON.stringify(value));\n          }\n        }\n      },\n      level: {\n        get: function get() {\n          return level;\n        },\n        set: function set(value) {\n          if (value >= 0 && value <= 3) {\n            level = value;\n          } else if (value > 3) {\n            level = 3;\n          } else if (levels.hasOwnProperty(value)) {\n            level = levels[value];\n          } else {\n            logger.error('invalid \"level\" parameter value: ' + JSON.stringify(value));\n          }\n        }\n      },\n      connector: {\n        get: function get() {\n          return connector;\n        },\n        set: function set(value) {\n          if (value === null || value === \"\" || value === undefined) {\n            connector = null;\n          } else if (typeof value === 'function') {\n            connector = value;\n          } else {\n            logger.error('invalid \"connector\" parameter value: ' + JSON.stringify(value));\n          }\n        }\n      }\n    });\n  };\n\n  LoggerFactory.prototype.print = function (target, category, label, content) {\n    if (typeof content === 'string') {\n      var prefix = [new Date(), category];\n\n      if (label) {\n        prefix.push(label);\n      }\n\n      content = prefix.concat(content).join(' | ');\n    }\n\n    target.call(console, content);\n  };\n\n  function Logger(logger, category, label) {\n    this.logger = logger;\n    this.category = category;\n    this.label = label;\n  }\n\n  Object.keys(levels).forEach(function (targetName) {\n    Logger.prototype[targetName] = function (content) {\n      this.logger[targetName](this.category, this.label, content);\n    };\n\n    LoggerFactory.prototype[targetName] = function (category, label, content) {\n      if (this.level >= levels[targetName]) {\n        if (this.builtinEnabled) {\n          this.print(console[targetName], category, label, content);\n        }\n\n        if (this.connector) {\n          this.connector(targetName, category, label, content);\n        }\n      }\n    };\n  });\n\n  LoggerFactory.prototype.getLogger = function (category, label) {\n    var logger;\n\n    if (label && this.level === 3) {\n      return new Logger(this, category, label);\n    } else if (this.loggers[category]) {\n      return this.loggers[category];\n    } else {\n      logger = new Logger(this, category);\n      this.loggers[category] = logger;\n      return logger;\n    }\n  };\n\n  return LoggerFactory;\n};","map":null,"metadata":{},"sourceType":"script"}