{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _require = require('../../util'),\n    deprecateEvents = _require.deprecateEvents;\n\nfunction mixinRemoteMediaTrack(AudioOrVideoTrack) {\n  /**\n   * A {@link RemoteMediaTrack} represents a {@link MediaTrack} published to a\n   * {@link Room} by a {@link RemoteParticipant}.\n   * @emits RemoteMediaTrack#disabled\n   * @emits RemoteMediaTrack#enabled\n   * @emits RemoteMediaTrack#unsubscribed\n   */\n  return function (_AudioOrVideoTrack) {\n    _inherits(RemoteMediaTrack, _AudioOrVideoTrack);\n    /**\n     * Construct a {@link RemoteMediaTrack}.\n     * @param {MediaTrackReceiver} mediaTrackReceiver\n     * @param {boolean} isEnabled\n     * @param {{log: Log, name: ?string}} options\n     */\n\n\n    function RemoteMediaTrack(mediaTrackReceiver, isEnabled, options) {\n      _classCallCheck(this, RemoteMediaTrack);\n\n      var _this = _possibleConstructorReturn(this, (RemoteMediaTrack.__proto__ || Object.getPrototypeOf(RemoteMediaTrack)).call(this, mediaTrackReceiver, options));\n\n      Object.defineProperties(_this, {\n        _isEnabled: {\n          value: isEnabled,\n          writable: true\n        },\n        _isSubscribed: {\n          value: true,\n          writable: true\n        },\n        _sid: {\n          value: null,\n          writable: true\n        }\n      });\n      deprecateEvents('RemoteMediaTrack', _this, new Map([['unsubscribed', null]]), _this._log);\n      return _this;\n    }\n    /**\n     * The {@link RemoteMediaTrack}'s ID.\n     * @property {Track.ID}\n     * @deprecated Use the parent {@link RemoteTrackPublication}'s .trackName or\n     *   .trackSid instead\n     */\n\n\n    _createClass(RemoteMediaTrack, [{\n      key: '_setEnabled',\n\n      /**\n       * @private\n       * @param {boolean} isEnabled\n       */\n      value: function _setEnabled(isEnabled) {\n        if (this._isEnabled !== isEnabled) {\n          this._isEnabled = isEnabled;\n          this.emit(this._isEnabled ? 'enabled' : 'disabled', this);\n        }\n      }\n      /**\n       * @private\n       * @param {Track.SID} sid\n       */\n\n    }, {\n      key: '_setSid',\n      value: function _setSid(sid) {\n        if (!this._sid) {\n          this._sid = sid;\n        }\n      }\n      /**\n       * @private\n       */\n\n    }, {\n      key: '_unsubscribe',\n      value: function _unsubscribe() {\n        if (this._isSubscribed) {\n          this._isSubscribed = false;\n          this.emit('unsubscribed', this);\n        }\n      }\n    }, {\n      key: 'id',\n      get: function get() {\n        this._log.deprecated('RemoteMediaTrack#id has been deprecated and is ' + 'scheduled for removal in twilio-video.js@2.0.0. Use the parent ' + 'RemoteTrackPublication\\'s .trackName or .trackSid instead.');\n\n        return this._id;\n      }\n      /**\n       * Whether the {@link RemoteMediaTrack} is enabled\n       * @property {boolean}\n       */\n\n    }, {\n      key: 'isEnabled',\n      get: function get() {\n        return this._isEnabled;\n      }\n      /**\n       * Whether the {@link RemoteMediaTrack} is subscribed to\n       * @property {boolean}\n       * @deprecated Use the parent {@link RemoteTrackPublication}'s .isSubscribed\n       *   instead\n       */\n\n    }, {\n      key: 'isSubscribed',\n      get: function get() {\n        this._log.deprecated('RemoteMediaTrack#isSubscribed has been deprecated and is ' + 'scheduled for removal in twilio-video.js@2.0.0. Use the ' + 'parent RemoteTrackPublication\\'s .isSubscribed instead.');\n\n        return this._isSubscribed;\n      }\n      /**\n       * The SID assigned to the {@link RemoteMediaTrack}\n       * @property {Track.SID}\n       */\n\n    }, {\n      key: 'sid',\n      get: function get() {\n        return this._sid;\n      }\n    }]);\n\n    return RemoteMediaTrack;\n  }(AudioOrVideoTrack);\n}\n/**\n * A {@link RemoteMediaTrack} was disabled.\n * @param {RemoteMediaTrack} track - The {@link RemoteMediaTrack} that was\n *   disabled\n * @event RemoteMediaTrack#disabled\n */\n\n/**\n * A {@link RemoteMediaTrack} was enabled.\n * @param {RemoteMediaTrack} track - The {@link RemoteMediaTrack} that was\n *   enabled\n * @event RemoteMediaTrack#enabled\n */\n\n/**\n * The {@link RemoteMediaTrack} was unsubscribed from.\n * @event RemoteMediaTrack#unsubscribed\n * @param {RemoteMediaTrack} track - The {@link RemoteMediaTrack} that was\n *   unsubscribed from\n * @deprecated Use the parent {@link RemoteTrackPublication}'s \"unsubscribed\"\n *   event instead\n */\n\n\nmodule.exports = mixinRemoteMediaTrack;","map":null,"metadata":{},"sourceType":"script"}