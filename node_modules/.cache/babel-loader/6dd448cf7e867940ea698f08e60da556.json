{"ast":null,"code":"/* globals RTCPeerConnection, RTCRtpTransceiver, RTCSessionDescription */\n'use strict';\n\nvar EventTarget = require('../util/eventtarget');\n\nvar inherits = require('util').inherits;\n\nvar Latch = require('../util/latch');\n\nvar RTCRtpSenderShim = require('../rtcrtpsender');\n\nvar sdpUtils = require('../util/sdp');\n\nvar util = require('../util');\n\nvar isUnifiedPlan = 'currentDirection' in RTCRtpTransceiver.prototype;\nvar updateTrackIdsToSSRCs = isUnifiedPlan ? sdpUtils.updateUnifiedPlanTrackIdsToSSRCs : sdpUtils.updatePlanBTrackIdsToSSRCs;\n\nfunction SafariRTCPeerConnection(configuration) {\n  if (!(this instanceof SafariRTCPeerConnection)) {\n    return new SafariRTCPeerConnection(configuration);\n  }\n\n  EventTarget.call(this);\n  util.interceptEvent(this, 'datachannel');\n  util.interceptEvent(this, 'iceconnectionstatechange');\n  util.interceptEvent(this, 'signalingstatechange');\n  util.interceptEvent(this, 'track');\n  var peerConnection = new RTCPeerConnection(configuration);\n  Object.defineProperties(this, {\n    _audioTransceiver: {\n      value: null,\n      writable: true\n    },\n    _isClosed: {\n      value: false,\n      writable: true\n    },\n    _peerConnection: {\n      value: peerConnection\n    },\n    _pendingLocalOffer: {\n      value: null,\n      writable: true\n    },\n    _pendingRemoteOffer: {\n      value: null,\n      writable: true\n    },\n    _senders: {\n      value: new Map()\n    },\n    _signalingStateLatch: {\n      value: new Latch()\n    },\n    _tracksToSSRCs: {\n      value: new Map()\n    },\n    _videoTransceiver: {\n      value: null,\n      writable: true\n    },\n    localDescription: {\n      enumerable: true,\n      get: function get() {\n        return this._pendingLocalOffer || this._peerConnection.localDescription;\n      }\n    },\n    iceConnectionState: {\n      enumerable: true,\n      get: function get() {\n        return this._isClosed ? 'closed' : this._peerConnection.iceConnectionState;\n      }\n    },\n    iceGatheringState: {\n      enumerable: true,\n      get: function get() {\n        return this._isClosed ? 'complete' : this._peerConnection.iceGatheringState;\n      }\n    },\n    // NOTE(mroberts): Keep this here until the following is fixed.\n    //\n    //   https://bugs.webkit.org/show_bug.cgi?id=174323\n    //\n    remoteDescription: {\n      enumerable: true,\n      get: function get() {\n        return this._pendingRemoteOffer || this._peerConnection.remoteDescription;\n      }\n    },\n    signalingState: {\n      enumerable: true,\n      get: function get() {\n        if (this._isClosed) {\n          return 'closed';\n        } else if (this._pendingLocalOffer) {\n          return 'have-local-offer';\n        } else if (this._pendingRemoteOffer) {\n          return 'have-remote-offer';\n        }\n\n        return this._peerConnection.signalingState;\n      }\n    }\n  });\n  var self = this;\n  peerConnection.addEventListener('datachannel', function ondatachannel(event) {\n    shimDataChannel(event.channel);\n    self.dispatchEvent(event);\n  });\n  peerConnection.addEventListener('iceconnectionstatechange', function oniceconnectionstatechange() {\n    if (self._isClosed) {\n      return;\n    }\n\n    self.dispatchEvent.apply(self, arguments);\n  });\n  peerConnection.addEventListener('signalingstatechange', function onsignalingstatechange() {\n    if (self._isClosed) {\n      return;\n    }\n\n    if (!self._pendingLocalOffer && !self._pendingRemoteOffer) {\n      self.dispatchEvent.apply(self, arguments);\n    }\n  }); // NOTE(syerrapragada): This ensures that SafariRTCPeerConnection's \"remoteDescription\", when accessed\n  // in an RTCTrackEvent listener, will point to the underlying RTCPeerConnection's\n  // \"remoteDescription\". Before this fix, this was still pointing to \"_pendingRemoteOffer\"\n  // even though a new remote RTCSessionDescription had already been applied.\n\n  peerConnection.addEventListener('track', function ontrack(event) {\n    self._pendingRemoteOffer = null;\n    self.dispatchEvent(event);\n  });\n  util.proxyProperties(RTCPeerConnection.prototype, this, peerConnection);\n}\n\ninherits(SafariRTCPeerConnection, EventTarget);\n\nSafariRTCPeerConnection.prototype.addIceCandidate = function addIceCandidate(candidate) {\n  var self = this;\n\n  if (this.signalingState === 'have-remote-offer') {\n    return this._signalingStateLatch.when('low').then(function signalingStatesResolved() {\n      return self._peerConnection.addIceCandidate(candidate);\n    });\n  }\n\n  return this._peerConnection.addIceCandidate(candidate);\n};\n\nSafariRTCPeerConnection.prototype.createOffer = function createOffer(options) {\n  options = Object.assign({}, options);\n  var self = this; // NOTE(mroberts): In general, this is not the way to do this; however, it's\n  // good enough for our application.\n\n  if (options.offerToReceiveAudio && !this._audioTransceiver && !(isUnifiedPlan && hasSendersForTracksOfKind(this, 'audio'))) {\n    delete options.offerToReceiveAudio;\n\n    try {\n      this._audioTransceiver = isUnifiedPlan ? this.addTransceiver('audio', {\n        direction: 'recvonly'\n      }) : this.addTransceiver('audio');\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  if (options.offerToReceiveVideo && !this._videoTransceiver && !(isUnifiedPlan && hasSendersForTracksOfKind(this, 'video'))) {\n    delete options.offerToReceiveVideo;\n\n    try {\n      this._videoTransceiver = isUnifiedPlan ? this.addTransceiver('video', {\n        direction: 'recvonly'\n      }) : this.addTransceiver('video');\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  return this._peerConnection.createOffer(options).then(function (offer) {\n    return new RTCSessionDescription({\n      type: offer.type,\n      sdp: updateTrackIdsToSSRCs(self._tracksToSSRCs, offer.sdp)\n    });\n  });\n};\n\nSafariRTCPeerConnection.prototype.createAnswer = function createAnswer(options) {\n  var self = this;\n\n  if (this._pendingRemoteOffer) {\n    return this._peerConnection.setRemoteDescription(this._pendingRemoteOffer).then(function setRemoteDescriptionSucceeded() {\n      self._signalingStateLatch.lower();\n\n      return self._peerConnection.createAnswer();\n    }).then(function createAnswerSucceeded(answer) {\n      self._pendingRemoteOffer = null;\n      return isUnifiedPlan ? new RTCSessionDescription({\n        type: answer.type,\n        sdp: updateTrackIdsToSSRCs(self._tracksToSSRCs, answer.sdp)\n      }) : answer;\n    }, function setRemoteDescriptionOrCreateAnswerFailed(error) {\n      self._pendingRemoteOffer = null;\n      throw error;\n    });\n  }\n\n  return this._peerConnection.createAnswer(options).then(function (answer) {\n    return isUnifiedPlan ? new RTCSessionDescription({\n      type: answer.type,\n      sdp: updateTrackIdsToSSRCs(self._tracksToSSRCs, answer.sdp)\n    }) : answer;\n  });\n};\n\nSafariRTCPeerConnection.prototype.createDataChannel = function createDataChannel(label, dataChannelDict) {\n  var dataChannel = this._peerConnection.createDataChannel(label, dataChannelDict);\n\n  shimDataChannel(dataChannel);\n  return dataChannel;\n};\n\nSafariRTCPeerConnection.prototype.setLocalDescription = function setLocalDescription(description) {\n  return setDescription(this, true, description);\n};\n\nSafariRTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(description) {\n  return setDescription(this, false, description);\n};\n\nSafariRTCPeerConnection.prototype.close = function close() {\n  if (this._isClosed) {\n    return;\n  }\n\n  this._isClosed = true;\n\n  this._peerConnection.close();\n\n  var self = this;\n  setTimeout(function () {\n    self.dispatchEvent(new Event('iceconnectionstatechange'));\n    self.dispatchEvent(new Event('signalingstatechange'));\n  });\n}; // NOTE(mmalavalli): Because we are not delegating to the native\n// RTCPeerConnection#removeTrack(), we have to manually maintain a list of added\n// tracks. So we disable the delegation to the native RTCPeerConnection#addTrack()\n// for now. Also, we maintain only one RTCRtpSender per MediaStreamTrack for our\n// use case, and not worry about multiple RTCRtpSenders due to replaceTrack().\n\n\nSafariRTCPeerConnection.prototype.addTrack = function addTrack() {\n  var args = [].slice.call(arguments);\n  var track = args[0];\n\n  var sender = this._senders.get(track);\n\n  if (sender && sender.track) {\n    throw new Error('Cannot add MediaStreamTrack [' + track.id + ', ' + track.kind + ']: RTCPeerConnection already has it');\n  }\n\n  sender = getActiveSenders(this._peerConnection).get(track) || this._peerConnection.addTrack.apply(this._peerConnection, args); // NOTE(mmalavalli): webrtc-adapter has a bug where the \"addTrack\" shim\n  // does not return an RTCRtpSender and returns undefined instead. An issue\n  // [https://github.com/webrtc/adapter/issues/714] has been filed. For now,\n  // we manually get the RTCRtpSender associated with the added track and\n  // return it.\n\n  sender = sender || getActiveSenders(this._peerConnection).get(track);\n\n  this._senders.set(track, sender);\n\n  return sender;\n}; // NOTE(mmalavalli): This shim works around a Safari bug in \"unified-plan\"\n// SDPs where adding a MediaStreamTrack that was previously added and removed\n// generates an SDP where the MSID does not match the MediaStreamTrack ID.\n//\n// Safari bug: https://bugs.webkit.org/show_bug.cgi?id=192101\n//\n\n\nif (RTCPeerConnection.prototype.addTransceiver) {\n  SafariRTCPeerConnection.prototype.addTransceiver = function addTransceiver() {\n    var transceiver = this._peerConnection.addTransceiver.apply(this._peerConnection, arguments);\n\n    var sender = transceiver.sender;\n    var track = sender.track;\n\n    this._senders.set(track, sender);\n\n    return transceiver;\n  };\n} // NOTE(mroberts): We can't really remove tracks right now, at least if we\n// ever want to add them back...\n//\n//     https://bugs.webkit.org/show_bug.cgi?id=174327\n//\n// NOTE(mmalavalli): This shim also works around a Safari bug in \"unified-plan\"\n// SDPs where adding a MediaStreamTrack that was previously added and removed\n// generates an SDP where the MSID does not match the MediaStreamTrack ID.\n//\n// Safari bug: https://bugs.webkit.org/show_bug.cgi?id=192101\n//\n\n\nSafariRTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\n  if (this._isClosed) {\n    throw new Error('Cannot remove MediaStreamTrack: RTCPeerConnection is closed');\n  }\n\n  var track = sender.track;\n\n  if (!track) {\n    return;\n  }\n\n  sender = this._senders.get(track);\n\n  if (sender && sender.track) {\n    this._senders.set(track, new RTCRtpSenderShim(null));\n  }\n}; // NOTE(mmalavalli): Because we are not delegating to the native\n// RTCPeerConnection#removeTrack(), we have to manually maintain a list of added\n// tracks. So we disable the delegation to the native RTCPeerConnection#getSenders()\n// for now.\n\n\nSafariRTCPeerConnection.prototype.getSenders = function getSenders() {\n  return Array.from(this._senders.values());\n};\n\nutil.delegateMethods(RTCPeerConnection.prototype, SafariRTCPeerConnection.prototype, '_peerConnection');\n\nfunction setDescription(peerConnection, local, description) {\n  function setPendingLocalOffer(offer) {\n    if (local) {\n      peerConnection._pendingLocalOffer = offer;\n    } else {\n      peerConnection._pendingRemoteOffer = offer;\n    }\n  }\n\n  function clearPendingLocalOffer() {\n    if (local) {\n      peerConnection._pendingLocalOffer = null;\n    } else {\n      peerConnection._pendingRemoteOffer = null;\n    }\n  }\n\n  var pendingLocalOffer = local ? peerConnection._pendingLocalOffer : peerConnection._pendingRemoteOffer;\n  var pendingRemoteOffer = local ? peerConnection._pendingRemoteOffer : peerConnection._pendingLocalOffer;\n  var intermediateState = local ? 'have-local-offer' : 'have-remote-offer';\n  var setLocalDescription = local ? 'setLocalDescription' : 'setRemoteDescription';\n\n  if (!local && pendingRemoteOffer && description.type === 'answer') {\n    return setRemoteAnswer(peerConnection, description);\n  } else if (description.type === 'offer') {\n    if (peerConnection.signalingState !== intermediateState && peerConnection.signalingState !== 'stable') {\n      return Promise.reject(new Error('Cannot set ' + (local ? 'local' : 'remote') + ' offer in state ' + peerConnection.signalingState));\n    }\n\n    if (!pendingLocalOffer && peerConnection._signalingStateLatch.state === 'low') {\n      peerConnection._signalingStateLatch.raise();\n    }\n\n    var previousSignalingState = peerConnection.signalingState;\n    setPendingLocalOffer(description); // Only dispatch a signalingstatechange event if we transitioned.\n\n    if (peerConnection.signalingState !== previousSignalingState) {\n      return Promise.resolve().then(function dispatchSignalingStateChangeEvent() {\n        peerConnection.dispatchEvent(new Event('signalingstatechange'));\n      });\n    }\n\n    return Promise.resolve();\n  } else if (description.type === 'rollback') {\n    if (peerConnection.signalingState !== intermediateState) {\n      return Promise.reject(new Error('Cannot rollback ' + (local ? 'local' : 'remote') + ' description in ' + peerConnection.signalingState));\n    }\n\n    clearPendingLocalOffer();\n    return Promise.resolve().then(function dispatchSignalingStateChangeEvent() {\n      peerConnection.dispatchEvent(new Event('signalingstatechange'));\n    });\n  }\n\n  return peerConnection._peerConnection[setLocalDescription](description);\n}\n\nfunction setRemoteAnswer(peerConnection, answer) {\n  var pendingLocalOffer = peerConnection._pendingLocalOffer;\n  return peerConnection._peerConnection.setLocalDescription(pendingLocalOffer).then(function setLocalOfferSucceeded() {\n    peerConnection._pendingLocalOffer = null;\n    return peerConnection.setRemoteDescription(answer);\n  }).then(function setRemoteAnswerSucceeded() {\n    peerConnection._signalingStateLatch.lower();\n  });\n}\n/**\n * Whether a SafariRTCPeerConnection has any RTCRtpSender(s) for the given\n * MediaStreamTrack kind.\n * @param {SafariRTCPeerConnection} peerConnection\n * @param {'audio' | 'video'} kind\n * @returns {boolean}\n */\n\n\nfunction hasSendersForTracksOfKind(peerConnection, kind) {\n  return !!peerConnection.getTransceivers().find(function (transceiver) {\n    return transceiver.sender && transceiver.sender.track && transceiver.sender.track.kind === kind;\n  });\n}\n/**\n * Shim an RTCDataChannel. This function mutates the RTCDataChannel.\n * @param {RTCDataChannel} dataChannel\n * @returns {RTCDataChannel}\n */\n\n\nfunction shimDataChannel(dataChannel) {\n  return Object.defineProperties(dataChannel, {\n    maxPacketLifeTime: {\n      value: dataChannel.maxPacketLifeTime === 65535 ? null : dataChannel.maxPacketLifeTime\n    },\n    maxRetransmits: {\n      value: dataChannel.maxRetransmits === 65535 ? null : dataChannel.maxRetransmits\n    }\n  });\n}\n/**\n * Gets the active RTCRtpSenders of the RTCPeerConnection.\n * @param peerConnection\n * @returns {Map<MediaStreamTrack, RTCRtpSender>}\n */\n\n\nfunction getActiveSenders(peerConnection) {\n  return new Map(peerConnection.getSenders().filter(function (sender) {\n    return sender.track;\n  }).map(function (sender) {\n    return [sender.track, sender];\n  }));\n}\n\nmodule.exports = SafariRTCPeerConnection;","map":null,"metadata":{},"sourceType":"script"}