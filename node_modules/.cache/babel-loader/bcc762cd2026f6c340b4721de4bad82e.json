{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function (SIP) {\n  var ClientContext;\n\n  ClientContext = function ClientContext(ua, method, target, options) {\n    var originalTarget = target; // Validate arguments\n\n    if (target === undefined) {\n      throw new TypeError('Not enough arguments');\n    }\n\n    this.ua = ua;\n    this.logger = ua.getLogger('sip.clientcontext');\n    this.method = method;\n    target = ua.normalizeTarget(target);\n\n    if (!target) {\n      throw new TypeError('Invalid target: ' + originalTarget);\n    }\n    /* Options\n     * - extraHeaders\n     * - params\n     * - contentType\n     * - body\n     */\n\n\n    options = Object.create(options || Object.prototype);\n    options.extraHeaders = (options.extraHeaders || []).slice(); // Build the request\n\n    this.request = new SIP.OutgoingRequest(this.method, target, this.ua, options.params, options.extraHeaders);\n\n    if (options.body) {\n      this.body = {};\n      this.body.body = options.body;\n\n      if (options.contentType) {\n        this.body.contentType = options.contentType;\n      }\n\n      this.request.body = this.body;\n    }\n    /* Set other properties from the request */\n\n\n    this.localIdentity = this.request.from;\n    this.remoteIdentity = this.request.to;\n    this.data = {};\n  };\n\n  ClientContext.prototype = Object.create(SIP.EventEmitter.prototype);\n\n  ClientContext.prototype.send = function () {\n    new SIP.RequestSender(this, this.ua).send();\n    return this;\n  };\n\n  ClientContext.prototype.cancel = function (options) {\n    options = options || {};\n    options.extraHeaders = (options.extraHeaders || []).slice();\n    var cancel_reason = SIP.Utils.getCancelReason(options.status_code, options.reason_phrase);\n    this.request.cancel(cancel_reason, options.extraHeaders);\n    this.emit('cancel');\n  };\n\n  ClientContext.prototype.receiveResponse = function (response) {\n    var cause = SIP.Utils.getReasonPhrase(response.status_code);\n\n    switch (true) {\n      case /^1[0-9]{2}$/.test(response.status_code):\n        this.emit('progress', response, cause);\n        break;\n\n      case /^2[0-9]{2}$/.test(response.status_code):\n        if (this.ua.applicants[this]) {\n          delete this.ua.applicants[this];\n        }\n\n        this.emit('accepted', response, cause);\n        break;\n\n      default:\n        if (this.ua.applicants[this]) {\n          delete this.ua.applicants[this];\n        }\n\n        this.emit('rejected', response, cause);\n        this.emit('failed', response, cause);\n        break;\n    }\n  };\n\n  ClientContext.prototype.onRequestTimeout = function () {\n    this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n  };\n\n  ClientContext.prototype.onTransportError = function () {\n    this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n  };\n\n  SIP.ClientContext = ClientContext;\n};","map":null,"metadata":{},"sourceType":"script"}