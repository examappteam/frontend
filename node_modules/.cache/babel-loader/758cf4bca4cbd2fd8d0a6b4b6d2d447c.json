{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DataTrackTransceiver = require('./transceiver');\n\nvar makeUUID = require('../util').makeUUID;\n/**\n * A {@link DataTrackSender} represents a {@link DataTrackTransceiver} over\n * which data can be sent. Internally, it uses a collection of RTCDataChannels\n * to send data.\n * @extends DataTrackTransceiver\n */\n\n\nvar DataTrackSender = function (_DataTrackTransceiver) {\n  _inherits(DataTrackSender, _DataTrackTransceiver);\n  /**\n   * Construct a {@link DataTrackSender}.\n   * @param {?number} maxPacketLifeTime\n   * @param {?number} maxRetransmits\n   * @param {boolean} ordered\n   */\n\n\n  function DataTrackSender(maxPacketLifeTime, maxRetransmtis, ordered) {\n    _classCallCheck(this, DataTrackSender);\n\n    var _this = _possibleConstructorReturn(this, (DataTrackSender.__proto__ || Object.getPrototypeOf(DataTrackSender)).call(this, makeUUID(), maxPacketLifeTime, maxRetransmtis, ordered));\n\n    Object.defineProperties(_this, {\n      _dataChannels: {\n        value: new Set()\n      }\n    });\n    return _this;\n  }\n  /**\n   * Add an RTCDataChannel to the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n\n\n  _createClass(DataTrackSender, [{\n    key: 'addDataChannel',\n    value: function addDataChannel(dataChannel) {\n      this._dataChannels.add(dataChannel);\n\n      return this;\n    }\n    /**\n     * Remove an RTCDataChannel from the {@link DataTrackSender}.\n     * @param {RTCDataChannel} dataChannel\n     * @returns {this}\n     */\n\n  }, {\n    key: 'removeDataChannel',\n    value: function removeDataChannel(dataChannel) {\n      this._dataChannels.delete(dataChannel);\n\n      return this;\n    }\n    /**\n     * Send data over the {@link DataTrackSender}. Internally, this calls\n     * <code>send</code> over each of the underlying RTCDataChannels.\n     * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n     * @returns {this}\n     */\n\n  }, {\n    key: 'send',\n    value: function send(data) {\n      this._dataChannels.forEach(function (dataChannel) {\n        try {\n          dataChannel.send(data);\n        } catch (error) {// Do nothing.\n        }\n      });\n\n      return this;\n    }\n  }]);\n\n  return DataTrackSender;\n}(DataTrackTransceiver);\n\nmodule.exports = DataTrackSender;","map":null,"metadata":{},"sourceType":"script"}