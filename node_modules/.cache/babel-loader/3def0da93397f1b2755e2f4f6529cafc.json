{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n/**\n * A {@link Track} implementation\n * @extends EventEmitter\n * @property {Track.Kind} kind\n * @property {string} name\n */\n\n\nvar TrackSignaling = function (_EventEmitter) {\n  _inherits(TrackSignaling, _EventEmitter);\n  /**\n   * Construct a {@link TrackSignaling}.\n   * @param {string} name\n   * @param {Track.Kind} kind\n   * @param {boolean} isEnabled\n   */\n\n\n  function TrackSignaling(name, kind, isEnabled) {\n    _classCallCheck(this, TrackSignaling);\n\n    var _this = _possibleConstructorReturn(this, (TrackSignaling.__proto__ || Object.getPrototypeOf(TrackSignaling)).call(this));\n\n    var sid = null;\n    Object.defineProperties(_this, {\n      _isEnabled: {\n        value: isEnabled,\n        writable: true\n      },\n      _trackTransceiver: {\n        value: null,\n        writable: true\n      },\n      _sid: {\n        get: function get() {\n          return sid;\n        },\n        set: function set(_sid) {\n          if (sid === null) {\n            sid = _sid;\n          }\n        }\n      },\n      kind: {\n        enumerable: true,\n        value: kind\n      },\n      name: {\n        enumerable: true,\n        value: name\n      }\n    });\n    return _this;\n  }\n  /**\n   * Whether the {@link TrackSignaling} is enabled.\n   * @property {boolean}\n   */\n\n\n  _createClass(TrackSignaling, [{\n    key: 'disable',\n\n    /**\n     * Disable the {@link TrackSignaling} if it is not already disabled.\n     * @return {this}\n     */\n    value: function disable() {\n      return this.enable(false);\n    }\n    /**\n     * Enable (or disable) the {@link TrackSignaling} if it is not already enabled\n     * (or disabled).\n     * @param {boolean} [enabled=true]\n     * @return {this}\n     */\n\n  }, {\n    key: 'enable',\n    value: function enable(enabled) {\n      enabled = typeof enabled === 'boolean' ? enabled : true;\n\n      if (this.isEnabled !== enabled) {\n        this._isEnabled = enabled;\n        this.emit('updated');\n      }\n\n      return this;\n    }\n    /**\n     * Set the {@link TrackTransceiver} on the {@link TrackSignaling}.\n     * @param {TrackTransceiver} trackTransceiver\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setTrackTransceiver',\n    value: function setTrackTransceiver(trackTransceiver) {\n      trackTransceiver = trackTransceiver || null;\n\n      if (this.trackTransceiver !== trackTransceiver) {\n        this._trackTransceiver = trackTransceiver;\n        this.emit('updated');\n      }\n\n      return this;\n    }\n    /**\n     * Set the SID on the {@link TrackSignaling} once.\n     * @param {string} sid\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setSid',\n    value: function setSid(sid) {\n      if (this.sid === null) {\n        this._sid = sid;\n        this.emit('updated');\n      }\n\n      return this;\n    }\n  }, {\n    key: 'isEnabled',\n    get: function get() {\n      return this._isEnabled;\n    }\n    /**\n     * The {@link TrackSignaling}'s {@link Track.SID}.\n     * @property {Track.SID}\n     */\n\n  }, {\n    key: 'sid',\n    get: function get() {\n      return this._sid;\n    }\n    /**\n     * The {@link TrackSignaling}'s {@link TrackTransceiver}.\n     * @property {TrackTransceiver}\n     */\n\n  }, {\n    key: 'trackTransceiver',\n    get: function get() {\n      return this._trackTransceiver;\n    }\n  }]);\n\n  return TrackSignaling;\n}(EventEmitter);\n/**\n * Emitted whenever the {@link TrackSignaling} is updated\n * @event TrackSignaling#updated\n */\n\n\nmodule.exports = TrackSignaling;","map":null,"metadata":{},"sourceType":"script"}