{"ast":null,"code":"\"use strict\";\n/**\n * @fileoverview SIP NameAddrHeader\n */\n\n/**\n * @augments SIP\n * @class Class creating a Name Address SIP header.\n *\n * @param {SIP.URI} uri\n * @param {String} [displayName]\n * @param {Object} [parameters]\n *\n */\n\nmodule.exports = function (SIP) {\n  var NameAddrHeader;\n\n  NameAddrHeader = function NameAddrHeader(uri, displayName, parameters) {\n    var param; // Checks\n\n    if (!uri || !(uri instanceof SIP.URI)) {\n      throw new TypeError('missing or invalid \"uri\" parameter');\n    } // Initialize parameters\n\n\n    this.uri = uri;\n    this.parameters = {};\n\n    for (param in parameters) {\n      this.setParam(param, parameters[param]);\n    }\n\n    Object.defineProperties(this, {\n      friendlyName: {\n        get: function get() {\n          return this.displayName || uri.aor;\n        }\n      },\n      displayName: {\n        get: function get() {\n          return displayName;\n        },\n        set: function set(value) {\n          displayName = value === 0 ? '0' : value;\n        }\n      }\n    });\n  };\n\n  NameAddrHeader.prototype = {\n    setParam: function setParam(key, value) {\n      if (key) {\n        this.parameters[key.toLowerCase()] = typeof value === 'undefined' || value === null ? null : value.toString();\n      }\n    },\n    getParam: SIP.URI.prototype.getParam,\n    hasParam: SIP.URI.prototype.hasParam,\n    deleteParam: SIP.URI.prototype.deleteParam,\n    clearParams: SIP.URI.prototype.clearParams,\n    clone: function clone() {\n      return new NameAddrHeader(this.uri.clone(), this.displayName, JSON.parse(JSON.stringify(this.parameters)));\n    },\n    toString: function toString() {\n      var body, parameter;\n      body = this.displayName || this.displayName === 0 ? '\"' + this.displayName + '\" ' : '';\n      body += '<' + this.uri.toString() + '>';\n\n      for (parameter in this.parameters) {\n        body += ';' + parameter;\n\n        if (this.parameters[parameter] !== null) {\n          body += '=' + this.parameters[parameter];\n        }\n      }\n\n      return body;\n    }\n  };\n  /**\n    * Parse the given string and returns a SIP.NameAddrHeader instance or undefined if\n    * it is an invalid NameAddrHeader.\n    * @public\n    * @param {String} name_addr_header\n    */\n\n  NameAddrHeader.parse = function (name_addr_header) {\n    name_addr_header = SIP.Grammar.parse(name_addr_header, 'Name_Addr_Header');\n\n    if (name_addr_header !== -1) {\n      return name_addr_header;\n    } else {\n      return undefined;\n    }\n  };\n\n  SIP.NameAddrHeader = NameAddrHeader;\n};","map":null,"metadata":{},"sourceType":"script"}