{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar instances = 0;\n/**\n * A {@link ConstantIceServerSource} only ever returns a single set of ICE\n * servers. It is useful for providing a hard-coded set of ICE servers.\n * @extends EventEmitter\n * @implements {IceServerSource}\n */\n\nvar ConstantIceServerSource = function (_EventEmitter) {\n  _inherits(ConstantIceServerSource, _EventEmitter);\n  /**\n   * Construct a {@link ConstantIceServerSource}.\n   * @param {Array<RTCIceServerInit>} iceServers\n   */\n\n\n  function ConstantIceServerSource(iceServers) {\n    _classCallCheck(this, ConstantIceServerSource);\n\n    var _this = _possibleConstructorReturn(this, (ConstantIceServerSource.__proto__ || Object.getPrototypeOf(ConstantIceServerSource)).call(this));\n\n    Object.defineProperties(_this, {\n      _instance: {\n        value: ++instances\n      },\n      _iceServers: {\n        enumerable: true,\n        value: iceServers,\n        writable: true\n      },\n      _isStarted: {\n        value: false,\n        writable: true\n      },\n      isStarted: {\n        enumerable: true,\n        get: function get() {\n          return this._isStarted;\n        }\n      },\n      status: {\n        enumerable: true,\n        value: 'overrode'\n      }\n    });\n    return _this;\n  }\n\n  _createClass(ConstantIceServerSource, [{\n    key: 'start',\n    value: function start() {\n      this._isStarted = true;\n      return Promise.resolve(this._iceServers);\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      this._isStarted = false;\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return '[ConstantIceServerSource #' + this._instance + ']';\n    }\n  }]);\n\n  return ConstantIceServerSource;\n}(EventEmitter);\n\nmodule.exports = ConstantIceServerSource;","map":null,"metadata":{},"sourceType":"script"}