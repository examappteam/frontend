{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function (SIP) {\n  var ServerContext;\n\n  ServerContext = function ServerContext(ua, request) {\n    this.ua = ua;\n    this.logger = ua.getLogger('sip.servercontext');\n    this.request = request;\n\n    if (request.method === SIP.C.INVITE) {\n      this.transaction = new SIP.Transactions.InviteServerTransaction(request, ua);\n    } else {\n      this.transaction = new SIP.Transactions.NonInviteServerTransaction(request, ua);\n    }\n\n    if (request.body) {\n      this.body = request.body;\n    }\n\n    if (request.hasHeader('Content-Type')) {\n      this.contentType = request.getHeader('Content-Type');\n    }\n\n    this.method = request.method;\n    this.data = {};\n    this.localIdentity = request.to;\n    this.remoteIdentity = request.from;\n  };\n\n  ServerContext.prototype = Object.create(SIP.EventEmitter.prototype);\n\n  ServerContext.prototype.progress = function (options) {\n    options = Object.create(options || Object.prototype);\n    options.statusCode || (options.statusCode = 180);\n    options.minCode = 100;\n    options.maxCode = 199;\n    options.events = ['progress'];\n    return this.reply(options);\n  };\n\n  ServerContext.prototype.accept = function (options) {\n    options = Object.create(options || Object.prototype);\n    options.statusCode || (options.statusCode = 200);\n    options.minCode = 200;\n    options.maxCode = 299;\n    options.events = ['accepted'];\n    return this.reply(options);\n  };\n\n  ServerContext.prototype.reject = function (options) {\n    options = Object.create(options || Object.prototype);\n    options.statusCode || (options.statusCode = 480);\n    options.minCode = 300;\n    options.maxCode = 699;\n    options.events = ['rejected', 'failed'];\n    return this.reply(options);\n  };\n\n  ServerContext.prototype.reply = function (options) {\n    options = options || {}; // This is okay, so long as we treat options as read-only in this method\n\n    var statusCode = options.statusCode || 100,\n        minCode = options.minCode || 100,\n        maxCode = options.maxCode || 699,\n        reasonPhrase = SIP.Utils.getReasonPhrase(statusCode, options.reasonPhrase),\n        extraHeaders = options.extraHeaders || [],\n        body = options.body,\n        events = options.events || [],\n        response;\n\n    if (statusCode < minCode || statusCode > maxCode) {\n      throw new TypeError('Invalid statusCode: ' + statusCode);\n    }\n\n    response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n    events.forEach(function (event) {\n      this.emit(event, response, reasonPhrase);\n    }, this);\n    return this;\n  };\n\n  ServerContext.prototype.onRequestTimeout = function () {\n    this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n  };\n\n  ServerContext.prototype.onTransportError = function () {\n    this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n  };\n\n  SIP.ServerContext = ServerContext;\n};","map":null,"metadata":{},"sourceType":"script"}