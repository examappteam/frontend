{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar average = require('./average');\n\nvar SenderOrReceiverReport = require('./senderorreceiverreport');\n\nvar sum = require('./sum');\n/**\n * @interface ReceiverSummary\n * @property {number} bitrate\n * @property {number} fractionLost - 0–1\n * @property {number} [jitter] - s (undefined for video tracks in Chrome)\n */\n\n/**\n * @extends SenderOrReceiverReport\n * @property {number} deltaPacketsLost\n * @property {number} deltaPacketsReceived\n * @property {number} [fractionLost] - 0–1 (undefined in Firefox)\n * @property {number} [jitter] - s (undefined for video tracks in Chrome)\n * @property {number} phonyPacketsLost - 0–1\n */\n\n\nvar ReceiverReport = function (_SenderOrReceiverRepo) {\n  _inherits(ReceiverReport, _SenderOrReceiverRepo);\n  /**\n   * @param {StatsId} id\n   * @param {TrackId} trackId\n   * @param {number} bitrate - bps\n   * @param {number} deltaPacketsLost\n   * @param {number} deltaPacketsReceived\n   * @param {number} [fractionLost] - 0–1 (undefined in Firefox)\n   * @param {number} [jitter] - s (undefined for video tracks in Chrome)\n   */\n\n\n  function ReceiverReport(id, trackId, bitrate, deltaPacketsLost, deltaPacketsReceived, fractionLost, jitter) {\n    _classCallCheck(this, ReceiverReport);\n\n    var _this = _possibleConstructorReturn(this, (ReceiverReport.__proto__ || Object.getPrototypeOf(ReceiverReport)).call(this, id, trackId, bitrate));\n\n    var phonyFractionLost = deltaPacketsReceived > 0 ? deltaPacketsLost / deltaPacketsReceived : 0;\n    Object.defineProperties(_this, {\n      deltaPacketsLost: {\n        enumerable: true,\n        value: deltaPacketsLost\n      },\n      deltaPacketsReceived: {\n        enumerable: true,\n        value: deltaPacketsReceived\n      },\n      fractionLost: {\n        enumerable: true,\n        value: fractionLost\n      },\n      jitter: {\n        enumerable: true,\n        value: jitter\n      },\n      phonyFractionLost: {\n        enumerable: true,\n        value: phonyFractionLost\n      }\n    });\n    return _this;\n  }\n  /**\n   * Create a {@link ReceiverReport}.\n   * @param {string} trackId\n   * @param {RTCStats} olderStats\n   * @param {RTCStats} newerStats\n   * @returns {ReceiverReport}\n   */\n\n\n  _createClass(ReceiverReport, [{\n    key: 'summarize',\n\n    /**\n     * Summarize the {@link ReceiveReport}.\n     * @returns {ReceiverSummary}\n     */\n    value: function summarize() {\n      return {\n        bitrate: this.bitrate,\n        fractionLost: typeof this.fractionLost === 'number' ? this.fractionLost : this.phonyFractionLost,\n        jitter: this.jitter\n      };\n    }\n  }], [{\n    key: 'of',\n    value: function of(trackId, olderStats, newerStats) {\n      if (olderStats.id !== newerStats.id) {\n        throw new Error('RTCStats IDs must match');\n      }\n\n      var secondsElapsed = (newerStats.timestamp - olderStats.timestamp) / 1000;\n      var deltaBytesReceived = newerStats.bytesReceived - olderStats.bytesReceived;\n      var bitrate = secondsElapsed > 0 ? deltaBytesReceived / secondsElapsed * 8 : 0;\n      var deltaPacketsLost = Math.max(newerStats.packetsLost - olderStats.packetsLost, 0);\n      var deltaPacketsReceived = newerStats.packetsReceived - olderStats.packetsReceived;\n      var fractionLost = newerStats.fractionLost,\n          jitter = newerStats.jitter;\n      return new ReceiverReport(olderStats.id, trackId, bitrate, deltaPacketsLost, deltaPacketsReceived, fractionLost, jitter);\n    }\n    /**\n     * Summarize {@link ReceiverReport}s by summing and averaging their values.\n     * @param {Array<ReceiverReport>} reports\n     * @returns {ReceiverSummary}\n     */\n\n  }, {\n    key: 'summarize',\n    value: function summarize(reports) {\n      var summaries = reports.map(function (report) {\n        return report.summarize();\n      });\n      var bitrate = sum(summaries.map(function (summary) {\n        return summary.bitrate;\n      }));\n      var fractionLost = average(summaries.map(function (summary) {\n        return summary.fractionLost;\n      }));\n      var jitter = average(summaries.map(function (summary) {\n        return summary.jitter;\n      }));\n      return {\n        bitrate: bitrate,\n        fractionLost: fractionLost,\n        jitter: jitter\n      };\n    }\n  }]);\n\n  return ReceiverReport;\n}(SenderOrReceiverReport);\n\nmodule.exports = ReceiverReport;","map":null,"metadata":{},"sourceType":"script"}